### Part 1
    * One implementation decision on the part of the frontend/GUI that allows some level of encapsulation and data hiding is the flow of data from the XMLReader into the GUI, before that information is passed to the Simulation class to make a simulation. This completely seperates the concepts of the XMLReader from the simulation, and disallows the simulation from knowing about the XMLReader.
    * As it currently stands, we are trying to seperate our GUI as much as we can from the rest of the project, allowing us to have a single implementation of the GUI which works for everything, so in that sense, not much inheritance is going on here.
    * Ideally, our UI would be almost entirely seperate from the Simulation, and the UI would access information from the simulation, allowing it to display the information on the screen, though the UI itself would be completely hidden from the Simulation, Cell, and XMLReader classes.
    * One main error case which could happen in this situation is that the XMLReader doesn't return a "valid" (non-null) 2d array of Cells, which we could then report to the user, letting them know that their file is possibly configured in a manner which would not allow our reader to comprehend it.
    * I think this design is good because it best seperates the concept of the front end from the concept of the back-end, and minimizes the amount of direct dependencies which are put onto the Simulation as a direct result of the GUI. Though the GUI "probes" and updates the Simulation, the Simulation doesn't necessitate that this updating come explicitly from a GUI.